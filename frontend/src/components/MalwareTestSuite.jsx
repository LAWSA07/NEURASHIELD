import React, { useState, useEffect } from 'react';
import { 
  FiPlay, 
  FiCheckCircle, 
  FiXCircle, 
  FiAlertTriangle,
  FiShield,
  FiAlertOctagon,
  FiFileText,
  FiCpu,
  FiGlobe,
  FiMessageCircle
} from 'react-icons/fi';

const MalwareTestSuite = () => {
  const [testResults, setTestResults] = useState([]);
  const [isRunning, setIsRunning] = useState(false);
  const [currentTest, setCurrentTest] = useState(null);
  const [alerts, setAlerts] = useState([]);

  // Test scenarios based on our actual tests
  const testScenarios = [
    {
      id: 'clean-file-test',
      name: 'Clean File Test',
      description: 'Test with legitimate Windows files (notepad.exe, calc.exe)',
      type: 'file',
      data: {
        file_path: 'C:\\Windows\\System32\\notepad.exe'
      },
      expectedResult: 'Clean',
      icon: FiCheckCircle,
      color: 'green'
    },
    {
      id: 'malware-pattern-test',
      name: 'Malware Pattern Test',
      description: 'Test with suspicious patterns and commands',
      type: 'file',
      data: {
        file_path: 'malware_sample.txt'
      },
      expectedResult: 'Malicious',
      icon: FiAlertOctagon,
      color: 'red'
    },
    {
      id: 'behavioral-analysis-test',
      name: 'Behavioral Analysis Test',
      description: 'Test system behavior monitoring and process analysis',
      type: 'behavioral',
      data: {
        system_data: {
          cpu_usage: 95,
          memory_usage: 98,
          disk_usage: 90,
          network_connections: 500,
          suspicious_processes: ['malware.exe', 'keylogger.exe', 'ransomware.exe']
        }
      },
      expectedResult: 'Suspicious',
      icon: FiCpu,
      color: 'yellow'
    },
    {
      id: 'network-threat-test',
      name: 'Network Threat Test',
      description: 'Test encrypted threat detection and network analysis',
      type: 'network',
      data: {
        network_data: {
          packet_count: 50000,
          encrypted_ratio: 0.05,
          connection_duration: 3600,
          data_exfiltration: true,
          suspicious_ports: [4444, 8080, 1337]
        }
      },
      expectedResult: 'Threat',
      icon: FiGlobe,
      color: 'orange'
    },
    {
      id: 'social-engineering-test',
      name: 'Social Engineering Test',
      description: 'Test phishing and social engineering detection',
      type: 'social',
      data: {
        communication_data: {
          email_content: 'URGENT: Your account will be suspended in 24 hours! Click here immediately to verify: http://suspicious-site.com/verify',
          sender_domain: 'fake-bank.com',
          urgency_score: 0.95,
          suspicious_keywords: ['urgent', 'suspended', 'immediately']
        }
      },
      expectedResult: 'Suspicious',
      icon: FiMessageCircle,
      color: 'purple'
    },
    {
      id: 'enhanced-detection-test',
      name: 'Enhanced Detection Test',
      description: 'Test comprehensive threat detection using all modules',
      type: 'enhanced',
      data: {
        file_path: 'malware_sample.exe',
        system_data: {
          cpu_usage: 95,
          memory_usage: 98,
          disk_usage: 90,
          network_connections: 500,
          suspicious_behavior: true
        },
        network_data: {
          packet_count: 50000,
          encrypted_ratio: 0.05,
          connection_duration: 3600,
          data_exfiltration: true,
          suspicious_ports: [4444, 8080, 1337]
        }
      },
      expectedResult: 'Multiple Threats',
      icon: FiShield,
      color: 'blue'
    }
  ];

  // Fetch alerts from backend
  const fetchAlerts = async () => {
    try {
      const response = await fetch('http://localhost:8001/api/alerts');
      const data = await response.json();
      setAlerts(data);
    } catch (error) {
      console.error('Error fetching alerts:', error);
    }
  };

  // Create test malware sample
  const createTestSample = async () => {
    try {
      const response = await fetch('http://localhost:8001/api/test/create-malware-sample', {
        method: 'POST'
      });
      const data = await response.json();
      return data.file_path;
    } catch (error) {
      console.error('Error creating test sample:', error);
      return null;
    }
  };

  // Run individual test
  const runTest = async (test) => {
    setIsRunning(true);
    setCurrentTest(test.id);
    
    const startTime = Date.now();
    let result = {
      id: test.id,
      name: test.name,
      status: 'running',
      startTime,
      endTime: null,
      duration: 0,
      response: null,
      error: null,
      passed: false
    };

    setTestResults(prev => [...prev, result]);

    try {
      let endpoint = '';
      let requestData = { ...test.data };

      // Create test sample for file tests
      if (test.type === 'file' && test.data.file_path === 'malware_sample.txt') {
        const samplePath = await createTestSample();
        if (samplePath) {
          requestData.file_path = samplePath;
        }
      }

      switch (test.type) {
        case 'file':
          endpoint = '/api/file/analyze';
          break;
        case 'behavioral':
          endpoint = '/api/behavioral/analyze';
          break;
        case 'network':
          endpoint = '/api/encrypted/detect';
          break;
        case 'social':
          endpoint = '/api/social-engineering/detect';
          break;
        case 'enhanced':
          endpoint = '/api/enhanced/detect';
          break;
        default:
          endpoint = '/api/enhanced/detect';
      }

      const response = await fetch(`http://localhost:8001${endpoint}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(requestData)
      });

      const responseData = await response.json();
      const endTime = Date.now();
      const duration = endTime - startTime;

      // Determine if test passed based on expected result
      let passed = false;
      if (responseData.status === 'success') {
        if (test.type === 'file') {
          passed = responseData.result.prediction === test.expectedResult.toLowerCase() || 
                   responseData.result.threat_type?.toLowerCase().includes(test.expectedResult.toLowerCase());
        } else if (test.type === 'enhanced') {
          passed = responseData.threats_detected > 0;
        } else {
          passed = responseData.result?.threats_detected?.length > 0 || 
                   responseData.result?.threat_level !== 'low';
        }
      }

      result = {
        ...result,
        status: 'completed',
        endTime,
        duration,
        response: responseData,
        passed,
        error: null
      };

    } catch (error) {
      const endTime = Date.now();
      const duration = endTime - startTime;
      
      result = {
        ...result,
        status: 'failed',
        endTime,
        duration,
        response: null,
        error: error.message,
        passed: false
      };
    }

    setTestResults(prev => 
      prev.map(r => r.id === test.id ? result : r)
    );

    // Refresh alerts after test
    setTimeout(fetchAlerts, 1000);
    
    setIsRunning(false);
    setCurrentTest(null);
  };

  // Run all tests
  const runAllTests = async () => {
    setIsRunning(true);
    setTestResults([]);
    
    for (const test of testScenarios) {
      await runTest(test);
      await new Promise(resolve => setTimeout(resolve, 2000)); // Wait 2 seconds between tests
    }
    
    setIsRunning(false);
  };

  // Clear test results
  const clearResults = () => {
    setTestResults([]);
  };

  // Cleanup test samples
  const cleanupSamples = async () => {
    try {
      const response = await fetch('http://localhost:8001/api/test/cleanup-samples', {
        method: 'POST'
      });
      const data = await response.json();
      console.log('Cleanup result:', data);
    } catch (error) {
      console.error('Error cleaning up samples:', error);
    }
  };

  // Load alerts on component mount
  useEffect(() => {
    fetchAlerts();
    const interval = setInterval(fetchAlerts, 5000); // Refresh every 5 seconds
    return () => clearInterval(interval);
  }, []);

  const getStatusIcon = (status) => {
    switch (status) {
      case 'running':
        return <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-blue-500" />;
      case 'completed':
        return <FiCheckCircle className="h-4 w-4 text-green-500" />;
      case 'failed':
        return <FiXCircle className="h-4 w-4 text-red-500" />;
      default:
        return <FiAlertTriangle className="h-4 w-4 text-gray-500" />;
    }
  };

  const getStatusColor = (status, passed) => {
    if (status === 'running') return 'bg-blue-100 text-blue-800';
    if (status === 'completed' && passed) return 'bg-green-100 text-green-800';
    if (status === 'completed' && !passed) return 'bg-yellow-100 text-yellow-800';
    if (status === 'failed') return 'bg-red-100 text-red-800';
    return 'bg-gray-100 text-gray-800';
  };

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="bg-white rounded-lg shadow p-6">
        <div className="flex items-center justify-between">
          <div>
            <h2 className="text-2xl font-bold text-gray-900">Malware Detection Test Suite</h2>
            <p className="text-gray-600 mt-2">
              Comprehensive testing of all NeuralShield detection modules
            </p>
          </div>
          <div className="flex space-x-3">
            <button
              onClick={runAllTests}
              disabled={isRunning}
              className="btn-red-primary disabled:opacity-50 flex items-center space-x-2"
            >
              <FiPlay className="h-4 w-4" />
              <span>Run All Tests</span>
            </button>
            <button
              onClick={clearResults}
              className="btn-red-outline"
            >
              Clear Results
            </button>
            <button
              onClick={cleanupSamples}
              className="bg-red-600 text-white px-4 py-2 rounded-lg hover:bg-red-700"
            >
              Cleanup Samples
            </button>
          </div>
        </div>
      </div>

      {/* Test Scenarios */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
        {testScenarios.map((test) => {
          const Icon = test.icon;
          const result = testResults.find(r => r.id === test.id);
          
          return (
            <div key={test.id} className="bg-white rounded-lg shadow p-4">
              <div className="flex items-center space-x-3 mb-3">
                <Icon className={`h-6 w-6 text-${test.color}-500`} />
                <h3 className="font-semibold text-gray-900">{test.name}</h3>
              </div>
              <p className="text-sm text-gray-600 mb-4">{test.description}</p>
              
              <div className="space-y-2">
                <div className="flex items-center justify-between">
                  <span className="text-sm font-medium">Status:</span>
                  <span className={`px-2 py-1 rounded-full text-xs ${getStatusColor(result?.status, result?.passed)}`}>
                    {result?.status || 'Not Run'}
                  </span>
                </div>
                
                {result && (
                  <>
                    <div className="flex items-center justify-between">
                      <span className="text-sm font-medium">Result:</span>
                      <span className={`px-2 py-1 rounded-full text-xs ${
                        result.passed ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'
                      }`}>
                        {result.passed ? 'PASSED' : 'FAILED'}
                      </span>
                    </div>
                    
                    {result.duration && (
                      <div className="flex items-center justify-between">
                        <span className="text-sm font-medium">Duration:</span>
                        <span className="text-sm text-gray-600">{result.duration}ms</span>
                      </div>
                    )}
                  </>
                )}
              </div>
              
              <button
                onClick={() => runTest(test)}
                disabled={isRunning}
                className="w-full mt-4 btn-red-outline disabled:opacity-50 flex items-center justify-center space-x-2"
              >
                {currentTest === test.id ? (
                  <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-blue-500" />
                ) : (
                  <FiPlay className="h-4 w-4" />
                )}
                <span>Run Test</span>
              </button>
            </div>
          );
        })}
      </div>

      {/* Test Results */}
      {testResults.length > 0 && (
        <div className="bg-white rounded-lg shadow">
          <div className="px-6 py-4 border-b border-gray-200">
            <h3 className="text-lg font-semibold text-gray-900">Test Results</h3>
          </div>
          <div className="divide-y divide-gray-200">
            {testResults.map((result) => (
              <div key={result.id} className="p-6">
                <div className="flex items-center justify-between mb-3">
                  <div className="flex items-center space-x-3">
                    {getStatusIcon(result.status)}
                    <h4 className="font-medium text-gray-900">{result.name}</h4>
                  </div>
                  <div className="flex items-center space-x-4">
                    <span className={`px-2 py-1 rounded-full text-xs ${getStatusColor(result.status, result.passed)}`}>
                      {result.status}
                    </span>
                    {result.duration && (
                      <span className="text-sm text-gray-500">{result.duration}ms</span>
                    )}
                  </div>
                </div>
                
                {result.response && (
                  <div className="bg-gray-50 rounded-lg p-4 mt-3">
                    <h5 className="font-medium text-gray-900 mb-2">Response:</h5>
                    <pre className="text-xs text-gray-600 overflow-x-auto">
                      {JSON.stringify(result.response, null, 2)}
                    </pre>
                  </div>
                )}
                
                {result.error && (
                  <div className="bg-red-50 rounded-lg p-4 mt-3">
                    <h5 className="font-medium text-red-900 mb-2">Error:</h5>
                    <p className="text-sm text-red-700">{result.error}</p>
                  </div>
                )}
              </div>
            ))}
          </div>
        </div>
      )}

      {/* Live Alerts */}
      <div className="bg-white rounded-lg shadow">
        <div className="px-6 py-4 border-b border-gray-200">
          <h3 className="text-lg font-semibold text-gray-900">Live Detection Alerts</h3>
          <p className="text-sm text-gray-600">Real-time alerts from the detection system</p>
        </div>
        <div className="divide-y divide-gray-200">
          {alerts.length === 0 ? (
            <div className="p-6 text-center text-gray-500">
              No alerts detected. Run tests to see detection results.
            </div>
          ) : (
            alerts.map((alert) => (
              <div key={alert.id} className="p-6">
                <div className="flex items-center justify-between mb-2">
                  <h4 className="font-medium text-gray-900">{alert.threat_type}</h4>
                  <span className={`px-2 py-1 rounded-full text-xs ${
                    alert.severity === 'high' ? 'bg-red-100 text-red-800' :
                    alert.severity === 'medium' ? 'bg-yellow-100 text-yellow-800' :
                    'bg-green-100 text-green-800'
                  }`}>
                    {alert.severity.toUpperCase()}
                  </span>
                </div>
                <p className="text-sm text-gray-600 mb-2">{alert.description}</p>
                <div className="flex items-center space-x-4 text-xs text-gray-500">
                  <span>Method: {alert.detection_method}</span>
                  <span>Confidence: {(alert.confidence * 100).toFixed(1)}%</span>
                  <span>Time: {new Date(alert.timestamp).toLocaleTimeString()}</span>
                </div>
              </div>
            ))
          )}
        </div>
      </div>
    </div>
  );
};

export default MalwareTestSuite;
